#!/bin/bash

version="1.2.0"
scriptName="vsc_manager"

C_NULL="\e[0m"
C_CYAN="\e[36m"
C_RED="\e[31m"
C_YELLOW="\e[1;33m"
WARN_PREFIX="[SERVER]:"

# ';' - description separator
# '#' - params separator
COMMANDS=(
  "container_install#<?image_tag> <?port>;- download image (if empty and start container)"
  "container_start;- start container"
  "container_stop;- stop container"
  "container_restart;- restart container"
  "container_attach;- go to inside container"
  "container_cleanup#<?image_tag>;- stop container, remove container, remove image"
  "server_restart;- restart server"
  "server_status;- view status server"
  "server_backup;- create new save backup"
  "server_warn#<message>;- send warning into server"
  "server_update#<?download_url>;- download new server version and install inside container"
  "server_mod_install#<?download_url>;- install mod into server inside container"
  "auto_complete;- generate an autofill file (helps you enter commands on the (TAB) key)"
)

helpDetailed() {
  echo -e "This is VINTAGE STORY CONTAINER MANAGER!"
  echo -e "$C_YELLOW VERSION: $version $C_NULL"
  echo "Awailable commands:"
  iteration=1
  for i in "${COMMANDS[@]}"
  do
    IFS=';'
    read -a splitCmd <<< "$i"
    cmd=$(echo "${splitCmd[0]}" | sed "s/#/ /g")
    echo -e "$iteration) $C_CYAN$cmd$C_NULL ${splitCmd[1]}"
    ((iteration++))
  done
  exit
}

helpOnlyCommand() {
  resStr=""
  for i in "${COMMANDS[@]}"
  do
    IFS=';'
    read -a splitCmd <<< "$i"
    IFS='#'
    read -a splitCmd <<< "$splitCmd"
    resStr+="$splitCmd "
  done
    echo $resStr
  exit
}

#$1 - param name ; $2 - param value ; $3 - default value
setUpParam() {
  param=$2
  if [ -z "$2" ]; then
      read -p "Set $1 (default: $3): " param
  fi
  if [ -z "$param" ]; then
    param=$3
  fi
  echo -e "$param"
}

#$1 - array ref $2 - param name ; $3 - example value
setUpArrayParams() {
  local -n res=$1
  agree="y"
  while [[ $agree == "y" ]]
  do
    read -p "Do you want to add another one $2? (Press ENTER for skip or type 'y' for continue): " agree
    if [[ $agree == "y" ]]; then
      read -p "Set $2 param (example: $3): " newValue
      res+=( $newValue )
    fi
  done
}

install() {
  local ports
  setUpArrayParams ports "port" "42420"
  declare -p ports
  strPorts=""
  for port in "${ports[@]}"
  do
    strPorts+="-p $port:$port "
  done
  strPorts+="-p $2:$2"
  echo $strPorts

  sudo docker run -d --name vintage_story_server $strPorts --restart=unless-stopped -v vintage_story_server:/var/vintage_story barenad/vintage_story_server:$1
  sudo docker exec -u root -it vintage_story_server apt install -y tzdata
  sudo docker ps -a
}

saveServer() {
  sudo docker exec -it vintage_story_server vs_server command autosavenow
  sleep 10
}

cleanup() {
  echo "Cleanup container..."
  sudo docker stop vintage_story_server
  sudo docker rm vintage_story_server
  echo "Cleanup image..."
  sudo docker rmi barenad/vintage_story_server:$1
  echo "\nResult:\n\n"
  sudo docker ps -a
  echo
  sudo docker images
  echo
  sudo docker volume ls
  echo
  echo "Successfully completed!"
}

warn() {
  sudo docker exec -it vintage_story_server vs_server command announce "$WARN_PREFIX $1"
}

setUpAutoComplete() {
  sudo bash -c "echo '_auto_complete(){ _script_commands=\$(vsc_manager --commands);local cur;COMPREPLY=();cur=\"\${COMP_WORDS[COMP_CWORD]}\";COMPREPLY=( \$(compgen -W \"\${_script_commands}\" -- \${cur}) );return 0' > /etc/bash_completion.d/vsc_manager"
  sudo bash -c "echo '}; complete -o nospace -F _auto_complete vsc_manager' >> /etc/bash_completion.d/vsc_manager"
}

if [ ! -f /etc/bash_completion.d/vsc_manager ]; then
    echo -e "${C_YELLOW}Attention! The autofill file was not found! Autofill does not work! Enter '${C_CYAN}vsc_manager auto_complete${C_YELLOW}' to fix this!${C_NULL}"
fi

if [[ -z "$1" || "$1" == "-h" || "$1" == "--h" || "$1" == "-help" || "$1" == "--help" ]]; then
  helpDetailed
fi

case $1 in
    "--commands")
        helpOnlyCommand
        ;;
    "auto_complete")
        setUpAutoComplete
        ;;
    "container_install")
        install $(setUpParam "image_tag" "$2" "any_net_7") $(setUpParam "port" "$3" "42420")
        ;;
    "container_start")
        sudo docker start vintage_story_server
        ;;
    "container_stop")
        saveServer
        warn "Attention, the server will restart in 30 seconds!"
        sleep 30
        sudo docker stop vintage_story_server
        ;;
    "container_restart")
        saveServer
        warn "Attention, the server will restart in 30 seconds!"
        sleep 30
        sudo docker restart vintage_story_server
        ;;
    "server_update")
        sudo docker exec -it vintage_story_server vs_server stop
        sudo docker exec -u root -it vintage_story_server vs_server_update
        ;;
    "server_backup")
        saveServer
        sudo docker exec -it vintage_story_server vs_backup
        ;;
    "server_mod_install")
        sudo docker exec -it vintage_story_server vs_mod_install "$2"
        ;;
    "container_attach")
        sudo docker exec -u root -it vintage_story_server bash
        ;;
    "container_cleanup")
        saveServer
        cleanup $(setUpParam "image_tag" "$2" "any_net_7")
        ;;
    "server_status")
        sudo docker exec -it vintage_story_server vs_server status
        ;;
    "server_restart")
        saveServer
        warn "Attention, the server will restart in 30 seconds!"
        sleep 30
        sudo docker exec -it vintage_story_server vs_server restart
        ;;
    "server_warn")
        warn "$2"
        ;;
    *)
      echo -e "$C_RED Unknown command!$C_NULL"
      ;;
esac
